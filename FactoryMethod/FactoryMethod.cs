namespace FactoryMethod
{
    /// <summary>
    /// Создатель (Обобщенный Создатель).
    /// Интерфейс или абстрактный класс, 
    /// который определяет сигнатуру фабричного метода для создания продуктов.
    /// Он должен возвращать Обобщенный продукт.
    /// Данный класс один и общий для всех конкретных создателей.
    /// </summary>
    public abstract class Creator
    {
        /// <summary>
        /// </summary>
        /// <returns> Обобщенный продукт. </returns>
        public abstract IProduct FactoryMethod();

        // Данный класс дополнительно может содержать общую логику для всех конкретных создателей при необходимости.
    }


    /// <summary>
    /// Создатель (Конкретный Создатель).
    /// Класс конкретного создателя конкретного продукта, который реализует фабричный метод.
    /// Для каждого продукта необходим свой создатель. Конкретных создателей может быть много.
    /// </summary>
    public class ConcreteCreator : Creator
    {
        /// <summary>
        /// Конкретная реализация фабричного метода.
        /// Определяет процесс создания конкретного продукта,
        /// при этом возвращая обобщенный продукт (интерфейс или абстрактный класс продукта).
        /// </summary>
        /// <returns> Конкретный продукт, упакованный в виде обобщенного продукта. </returns>
        public override IProduct FactoryMethod()
        {
            // При необходимости здесь могут быть дополнительные действия,
            // кроме непосредственного создания конкретного продукта.
            return new ConcreteProduct();
        }
    }

    /// <summary>
    /// Продукт (Обобщенный Продукт).
    /// Интерфейс или абстрактный класс, 
    /// который определяет общие для всех продуктов свойства и методы
    /// (то есть характеристики и действия, которые будут на 100% у всех конкретных продуктов)
    /// При этом при необходимости может содержать базовую реализацию (если это класс).
    /// Данный класс (интерфейс) один и является общим для всех конкретных продуктов.
    /// </summary>
    public interface IProduct
    {
        string Name { get; set; }
        void DoWork();
    }

    /// <summary>
    /// Продукт (Конкретный продукт).
    /// Класс определяющий поведение конкретного продукта. 
    /// Для каждого конкретного продукта необходим свой собственный конкретный создатель.
    /// Конкретных продуктов может быть много.
    /// </summary>
    public class ConcreteProduct : IProduct
    {
        public string Name { get; set; }

        public void DoWork()
        {
            // Work
        }
    }
}
